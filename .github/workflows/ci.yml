name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write       # Needed for OIDC
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/portfolio"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI:${{ github.run_number }} .

      - name: Scan local image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_URI }}:${{ github.run_number }}
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.IMAGE_URI }}:${{ github.run_number }}
          docker tag ${{ env.IMAGE_URI }}:${{ github.run_number }} ${{ env.IMAGE_URI }}:latest
          docker push ${{ env.IMAGE_URI }}:latest

  deploy:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: SSH to Server and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # Reconstruct ECR URI on remote server
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION=${{ vars.AWS_REGION }}
            IMAGE_NAME="portfolio"
            IMAGE_TAG=${GITHUB_RUN_NUMBER}
            IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME"

            # Login to ECR on remote server
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Pull the Docker image
            docker pull $IMAGE_URI:$IMAGE_TAG

            # Stop/remove old container if exists
            docker rm -f resume || true

            # Run the new container
            docker run -d --name resume -p 8080:5001 $IMAGE_URI:$IMAGE_TAG
